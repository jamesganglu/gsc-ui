@mixin bp-large {
  @media only screen and (max-width: 60em) {
    @content;
  }
}

@mixin bp-medium {
  @media only screen and (max-width: 40em) {
    @content;
  }
}

@mixin bp-small {
  @media only screen and (max-width: 30em) {
    @content;
  }
}

@mixin border-radius($radius){
	-moz-border-radius: $radius;  
	-webkit-border-radius: $radius;  
	-ms-border-radius: $radius;  
	border-radius: $radius; 	
}

@mixin shadow($v){
  -moz-box-shadow:$v;
  -webkit-box-shadow:$v;
  box-shadow:$v;
}

@mixin colorShadow($radius, $r,$g,$b, $alpha){
  -moz-box-shadow:    0px 0px $radius rgba($r,$g,$b, $alpha);
  -webkit-box-shadow: 0px 0px $radius rgba($r,$g,$b, $alpha);
  box-shadow:         0px 0px $radius rgba($r,$g,$b, $alpha);
}

// Horizontal gradient, from left to right
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
  background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
}

// Vertical gradient, from top to bottom
//
// Creates two color stops, start and end, by specifying a color and position for each color stop.
// Color stops are not available in IE9 and below.
@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
  background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
  background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
  background-repeat: repeat-x;
  background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
  background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
  background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
}
@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
  background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
  background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
  background-image: radial-gradient(circle, $inner-color, $outer-color);
  background-repeat: no-repeat;
}
@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
  background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

@mixin animate($name, $duration){
	-webkit-animation:$name ease-in 1;  /* call our keyframe named fade-in, use animattion ease-in and repeat it only 1 time */
	-moz-animation:$name ease-in 1;
	animation:$name ease-in 1;

	-webkit-animation-fill-mode:forwards;  /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
	-moz-animation-fill-mode:forwards;
	animation-fill-mode:forwards;

	-webkit-animation-duration:$duration;
	-moz-animation-duration:$duration;
	animation-duration:$duration;      
}

@mixin box-model($name){
	-webkit-box-sizing: $name;
	-moz-box-sizing: $name;
	box-sizing:$name;
}

@mixin bgAt2x($path, $ext: "jpg", $w: auto, $h: auto) {
  $at1x_path: "#{$path}.#{$ext}";
  $at2x_path: "#{$path}@2x.#{$ext}";

  background-image: url("#{$at1x_path}");

  @media all and (-webkit-min-device-pixel-ratio : 1.5),
         all and (-o-min-device-pixel-ratio: 3/2),
         all and (min--moz-device-pixel-ratio: 1.5),
         all and (min-device-pixel-ratio: 1.5) {
           background-image: url("#{$at2x_path}");
           background-size: $w $h;
  }
}

@mixin flex($value: 1) {
    -webkit-box-flex: $value;
    -moz-box-flex:    $value;
    box-flex:         $value;
}

/* FLIP */
@mixin flip($scaleX: -1) {
	-moz-transform:    scaleX($scaleX);
	-o-transform:      scaleX($scaleX);
	-webkit-transform: scaleX($scaleX);
	transform:         scaleX($scaleX);
	filter:            FlipH;
	-ms-filter:        "FlipH";
}

/* ROTATE*/
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
             filter: progid:DXImageTransform.Microsoft.Matrix(
                     M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
               zoom: 1;
}

/* TEXT SHADOW */
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

/* TRANSFORM  */
@mixin transform($v) {
    -webkit-transform: $v;
    -moz-transform:    $v;
    transform:         $v;
}

/* TRANSITION */
@mixin transition($v) {
    -moz-transition:    $v;
    -o-transition:      $v;
    -webkit-transition: $v;
    -ms-transition:     $v;
    transition:         $v;
}

@mixin opacity($opacity: 0.5) {
    filter:         alpha(opacity = ($opacity * 100));
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")";
    -moz-opacity:   $opacity;
    -khtml-opacity: $opacity;
    opacity:        $opacity;
}

@mixin fontface($name, $fileName, $fontWeight:normal, $fontStyle:normal){
	@font-face {
	    font-family: $name;
	    src: url('../fonts/#{$fileName}.eot');
	    src: url('../fonts/#{$fileName}.eot?#iefix') format('embedded-opentype'),
	         url('../fonts/#{$fileName}.woff') format('woff'),
	         url('../fonts/#{$fileName}.ttf') format('truetype'),
           url('../fonts/#{$fileName}.svg##{$fileName}') format('svg'),
	         url('../fonts/#{$fileName}.otf') format('opentype');
	    font-weight: $fontWeight;
	    font-style: $fontStyle;
	}
}

@mixin background-size($value){
  -webkit-background-size: $value;
  -moz-background-size: $value;
  -o-background-size: $value;
  background-size: $value;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}

@mixin columns($columns, $gap){
  -moz-column-count: $columns;
  -moz-column-gap: $gap;
  -webkit-column-count: $columns;
  -webkit-column-gap: $gap;  
}

@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after{
  display: table;
  line-height: 0;
  content: "";
  clear: both;
  }
}

@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


@mixin font-size($size, $res:1, $zoom:0) {
  $cssVal : $size/$res;  
  font-size: $cssVal;
  font-size: calculateRem($cssVal);
  @if $zoom {
	  @include bp-medium {
		$relatedSize : ($cssVal/$break-point-sd)*100;
		@if $relatedSize < 2.8 {
			$relatedSize:2.8;
		} 
		font-size: $relatedSize*1vw;
	  }
  }
}

@mixin visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

@mixin hamburger($w:30px, $h:25px, $thick:5px, $color:#333, $round:3px){
    width: $w;
    height: $h;
    cursor: pointer;
    @include transform(rotate(0deg));
    @include transition(.5s ease-in-out);
    >span{
      display: block;
      position: absolute;
      height: $thick;
      width: 100%;
      background: $color;
      border-radius: $round;
      opacity: 1;
      left: 0;
      @include transform( rotate(0deg));
      @include transition(.25s ease-in-out);
    }

    span:nth-child(1) {
      top: 0px;
    }

    span:nth-child(2), span:nth-child(3) {
      top: $h/2 - $thick/2;
    }

    span:nth-child(4) {
      top: $h - $thick;
    }

    .show-menu & span:nth-child(1) {
      top: $h/2 - $thick/2;
      width: 0%;
      left: 50%;
    }

    .show-menu &  span:nth-child(2) {
      @include transform( rotate(45deg));
    }

    .show-menu &  span:nth-child(3) {
      @include transform( rotate(-45deg));
    }

    .show-menu & span:nth-child(4) {
      top: $h/2 - $thick/2;
      width: 0%;
      left: 50%;
    }
}
